
name: Test OpLab API Integration

on:
  push:
    branches:
      - main
      - develop
      - feature/oplab-integration
  pull_request:
    branches:
      - main
      - develop

jobs:
  test-backend:
    runs-on: ubuntu-latest
    environment: desenvolvimento  # Environment name configured in GitHub
    env:
      OPLAB_API_TOKEN: ${{ secrets.OPLAB_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'


      - name: Install backend dependencies
        run: |
          cd backend-oplab
          pip install -r requirements.txt

      - name: Test OpLab API Integration
        run: |
          cd backend-oplab
          echo "Testing OpLab API integration with token..."
          python -c "
          import os
          import sys
          sys.path.insert(0, 'src')
          from routes.oplab import oplab_client
          
          print(f'OpLab API available: {oplab_client.is_available()}')
          if oplab_client.is_available():
              print('‚úÖ OpLab API token configured successfully')
              try:
                  # Test user info endpoint
                  user_info = oplab_client.get_user_info()
                  print(f'‚úÖ User info retrieved: {user_info.get(\"name\", \"Unknown\")}')
              except Exception as e:
                  print(f'‚ö†Ô∏è  User info test failed: {str(e)}')
          else:
              print('‚ùå OpLab API token not available')
              print('This is expected in PR from forks or if token is not configured')
          "

      - name: Test Backend Health
        run: |
          cd backend-oplab
          python -c "
          import sys
          sys.path.insert(0, 'src')
          from routes.oplab import get_metrics, get_health_check
          
          print('‚úÖ Backend modules loaded successfully')
          print('‚úÖ All imports working correctly')
          "

      - name: Run Backend Server Test
        run: |
          cd backend-oplab
          timeout 30s python src/main.py &
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:5000/api/health || echo "Health check failed"
          
          # Test metrics endpoint
          curl -f http://localhost:5000/api/metrics || echo "Metrics check failed"
          
          echo "‚úÖ Backend server tests completed"

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        run: |
          npm ci

      - name: Build frontend
        run: |
          npm run build

      - name: Test frontend build
        run: |
          echo "‚úÖ Frontend build completed successfully"
          ls -la dist/

  integration-test:
    runs-on: ubuntu-latest
    environment: desenvolvimento
    needs: [test-backend, test-frontend]
    env:
      OPLAB_API_TOKEN: ${{ secrets.OPLAB_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd backend-oplab && pip install -r requirements.txt
          npm ci

      - name: Run integration tests
        run: |
          echo "üöÄ Starting integration tests..."
          
          # Start backend
          cd backend-oplab
          python src/main.py &
          BACKEND_PID=$!
          cd ..
          
          # Wait for backend to start
          sleep 10
          
          # Test API endpoints
          echo "Testing API endpoints..."
          curl -f http://localhost:5000/api/health
          curl -f http://localhost:5000/api/metrics
          
          # Build frontend
          npm run build
          
          # Cleanup
          kill $BACKEND_PID || true
          
          echo "‚úÖ Integration tests completed successfully"


